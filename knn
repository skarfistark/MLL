class knn:
  def __init__(self,k):
    self.k=k

  def fit(self,x,y):
    self.x=x
    self.y=y
  
  def predict(self,x_test):
    pred=[]
    for i in x_test:
      distances=[]
      for j in self.x:
        temp=[]
        temp.append(self.x.index(j))
        dist= ((j[0]-i[0])**2+(j[1]-i[1])**2)**0.5
        temp.append(dist)
        distances.append(temp)
      distances.sort(key=lambda x : x[1])

      c0=0
      c1=0
      for i in range (self.k):
        if(self.y[distances[i][0]]==0):
          c0+=1
        else:
          c1+=1
      if(c0>c1):
        pred.append(0)
      else:
        pred.append(1)
    return pred

x_train = [[1,1],[3,4],[0,0],[5,5],[7,8]]
y_train = [0,1,0,1,1]

x_test=[[1,2],[6,6],[0,1],[8,7]]

knn=knn(3)
knn.fit(x_train,y_train)

print(knn.predict(x_test))
